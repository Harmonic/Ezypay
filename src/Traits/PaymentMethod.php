<?php

namespace harmonic\Ezypay\Traits;

use Illuminate\Support\Facades\Log;
use harmonic\Ezypay\Events\PaymentMethodSaved;

trait PaymentMethod
{
    /**
     * Get list of Payment Methods from Ezypay server.
     *
     * @param string $customerId
     * @param string $limit
     * @param int $cursor
     * @return array
     */
    public function getPaymentMethods(string $customerId, bool $fetchAll = false, int $limit = null, int $cursor = null)
    {
        $filters = [
            'limit' => $limit,
            'cursor' => $cursor,
        ];

        return $this->paginate('billing/customers/'.$customerId.'/'.'paymentmethods', $filters, $fetchAll);
    }

    /**
     * Relates a payment method to a customer.
     *
     * @param string $customerId
     * @param string $vaultPaymentMethod
     * @param bool $primary
     * @return object PaymentMethod
     */
    public function createPaymentMethod(string $customerId, string $vaultPaymentMethod, bool $primary = true)
    {
        $data = [
            'paymentMethodToken' => (string) $vaultPaymentMethod,
            'primary' => $primary,
        ];

        // Log::debug('Merchant ID: ' . config('ezypay.merchant_id'));
        // Log::debug('Token: ' . $this->token);
        // Log::debug('Customer ID: ' . $customerId);
        // Log::debug('Vault payment method: ' . $vaultPaymentMethod);

        $response = $this->request('POST', 'billing/customers/'.$customerId.'/paymentmethods', $data);
        $resource = \harmonic\Ezypay\Resources\PaymentMethod::make($response);
        event(new PaymentMethodSaved($resource));

        return $resource;
    }

    /**
     * Get default payment method for a customer.
     *
     * @param string $customerId
     * @return object PaymentMethod
     */
    public function getPrimaryPaymentMethod(string $customerId)
    {
        $response = $this->request('GET', 'billing/customers/'.$customerId.'/paymentmethods/primary');

        return \harmonic\Ezypay\Resources\PaymentMethod::make($response)->resolve();
    }

    /**
     * Get customer payment method by token.
     *
     * @param string $customerId
     * @param string $paymentMethodToken Auto-generated unique identifier of the payment method token generated by the Ezypay Vault.
     * @return object PaymentMethod
     */
    public function getPaymentMethod(string $customerId, string $paymentMethodToken)
    {
        return $this->request('GET', 'billing/customers/'.$customerId.'/paymentmethods/'.$paymentMethodToken);
    }

    /**
     * Delete customer payment method.
     *
     * @param string $customerId
     * @param string $paymentMethodToken
     * @return void
     */
    public function deletePaymentMethodByCustomerId(string $customerId, string $paymentMethodToken)
    {
        return $this->request(
            'DELETE',
            'billing/customers/'.$customerId.'/paymentmethods/'.$paymentMethodToken
        );
    }

    /**
     * Switch a payment method.
     *
     * @param string $customerId
     * @param string $oldPaymentMethod
     * @param string $newPaymentMethod
     * @return object PaymentMethod
     */
    public function replacePaymentMethod(string $customerId, string $oldPaymentMethod, string $newPaymentMethod)
    {
        $data = [
            'newPaymentMethodToken' => $newPaymentMethod,
            'primary' => true,
        ];

        $response = $this->request('PUT', 'billing/customers/'.$customerId.'/paymentmethods/'.$oldPaymentMethod.'/new', $data);

        $resource = \harmonic\Ezypay\Resources\PaymentMethod::make($response);
        event(new PaymentMethodSaved($resource));

        return $resource;
    }

    /**
     * Update customer primary payment method.
     *
     * @param string $customerId
     * @param string $paymentMethodToken
     * @return object PaymentMethod
     */
    public function updatePrimaryPaymentMethod(string $customerId, string $paymentMethodToken)
    {
        $resource = $this->request('PUT', 'billing/customers/'.$customerId.'/paymentmethods/'.$paymentMethodToken.'/primary');
        event(new PaymentMethodSaved($resource));

        return $resource;
    }
}
